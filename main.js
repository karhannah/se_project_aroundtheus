!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:o}=e;this.name=n,this.link=o,this._cardSelector=t,this._handleImageClick=s}getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this)}))}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_is-active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this.getTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImageElement.src=this.link,this._cardTitleElement.textContent=this.name,this._cardImageElement.alt=this.name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this.hideInputError(e)}))}checkInputValidity(e){e.validity.valid?this.hideInputError(e):this.showInputError(e,e.validationMessage)}toggleButtonState(){this.hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setEventListeners(){this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this.checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._handleModalClose=this._handleModalClose.bind(this),this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>this.close()))}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleModalClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleModalClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleModalClose(e){e.target===e.currentTarget&&this.close()}setEventListeners(){}}class n extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleForm=s,this.setEventListeners()}close(){super.close()}setEventListeners(){console.log(this._handleForm),this._popupForm.addEventListener("submit",this._handleForm)}getInputs(){const e=this._popupForm.getElementsByClassName("modal__input");let t=[];return Array.from(e).forEach((e=>{t.push(e.value)})),t}}const o={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t),this.renderItems()}renderItems(){this._items.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:function(t){return new e(t,"#card-template",y).getView()}},".gallery__cards"),i=(document.querySelector("#card-template").content.querySelector(".card"),new class{constructor(e){let{name:t,job:s}=e;this._name=t,this._job=s}getUserInfo(){return{name:this._name,job:this._job}}setUserInfo(e){let{name:t,job:s}=e;this._name=t,document.querySelector("#profile__title").textContent=this._name,this._job=s,document.querySelector("#profile__description").textContent=this._job}}("Jacques Cousteau","Explorer")),a=(document.querySelector(".gallery__cards"),document.querySelector("#profile__add-button")),l=document.querySelector("#profile__title"),c=document.querySelector("#profile__description"),d=document.querySelector("#modal__title"),u=document.querySelector("#modal__description"),m=document.querySelector("#profile__edit-button"),h=document.querySelector("#profile-form"),_=document.querySelector("#add-form"),p=new n({popupSelector:"#profileEditModal",handleFormSubmit:function(e){e.preventDefault();let t=p.getInputs();i.setUserInfo({name:t[0],job:t[1]}),p.close()}}),E=new n({popupSelector:"#cardModal",handleFormSubmit:function(e){e.preventDefault();let t=E.getInputs();var s;s={name:t[0],link:t[1]},r.addItem(s),e.target.reset(),v.resetValidation(),E.close()}}),g=new class extends s{constructor(e){super(e)}open(e,t){this._popupElement.querySelector(".modal__image").src=e,this._popupElement.querySelector(".modal__image").alt=e,this._popupElement.querySelector(".modal__caption").textContent=t,super.open()}}("#previewImageModal"),v=new t(o,_),S=new t(o,h);function y(e){g.open(e.link,e.name)}v.enableValidation(),S.enableValidation(),m.addEventListener("click",(()=>{d.value=l.textContent,u.value=c.textContent.trim(),p.open(),S.resetValidation()})),a.addEventListener("click",(()=>E.open()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,